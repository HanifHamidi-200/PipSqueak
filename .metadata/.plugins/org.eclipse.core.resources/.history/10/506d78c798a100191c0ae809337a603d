import java.util.Random;

public class numbersSort {
	private int numbers[] = new int[10];
	private int numbers2[] = new int[10];
	private boolean taken[] = new boolean[10];
	
	public void fSetNumbers(int nPos,int value) {
		numbers[nPos] = value;
		numbers2[nPos] = 0;
		taken[nPos] = false;
	}
	
	public int fGetNumbers(int nPos) {
		return numbers2[nPos];
	}
	
	private int fNext(int nPos) {
		boolean bFound = false;
		do {
			nPos++;
			if(nPos==11) {
				nPos = 1;
			}
			if(taken[nPos-1]==false) {
				bFound = true;
			}
		} while (!bFound);
		
		return nPos;
	}
	
	private boolean fLeft() {
		boolean bFound = false;
		
		for(int i=1;i<=10;i++) {
			if(taken[i-1]==false) {
				bFound = true;
			}
		}
		
		return bFound;
	}
	
	public void fPalindrome() {
		Random rnd1=new Random();
		
		int i=1;
		int nPos;
		boolean bFound = false;
		
		do {
			nPos=rnd1.nextInt(10)+1;
			/*if(taken[nPos-1]) {
				nPos=fNext(nPos);
			}*/
			numbers2[i-1] = numbers[nPos];
			i++;
			bFound = fLeft();
		}while (!bFound);
	}
}
